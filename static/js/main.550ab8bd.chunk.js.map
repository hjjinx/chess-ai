{"version":3,"sources":["components/Square.tsx","game/Piece.ts","game/InitialPosition.ts","game/pieceLogic.ts","game/AnalysePosition.ts","game/MinMax.ts","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","props","onClick","piece","active","handleClick","i","k","clickNothing","className","style","boxShadow","src","process","color","type","alt","margin","height","Piece","canMoveTo","numOfMoves","turnsSinceLastMove","importance","this","multiplier","initialBoard","initiallyCanMoveTo","valueOfPiece","Rook","j","Board","turn","doesThisHorizontalMoveResultInCheck","r","newBoard","map","inner","slice","isUnderCheck","doesThisVerticalMoveResultInCheck","Knight","left","thisMoveWillResultInCheck","right","Bishop","isUnderCheckIfThisMoveHappens","King","king","rook","board","Pawn","upLeft","upRight","pieceStateUpdate","valueOfBoard","PawnGivesCheck","RookGivesCheck","unit","KnightGivesCheck","BishopGivesCheck","KingGivesCheck","checkForWhom","isGivingCheck","PawnScore","RookScore","BishopScore","KingScore","KnightScore","fromTo","x","y","MinMax","iterationsLeft","alpha","beta","score","analyseBoard","moveToMake","bestMoveYet","bestScoreYet","returnValue","JSON","parse","stringify","count","copyOfNewBoard","scoreToSend","thisMove","Math","max","min","useState","setBoard","previousClick","setPreviousClick","setTurn","canMoveToHighlighted","setCanMoveToHighlighted","previousBoard","alert","movePiece","previousCanMoveTo","toReturn","newCanMoveTo","rows","col","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.550ab8bd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Piece } from \"../game/Piece\";\r\n\r\ninterface Props {\r\n  k: number;\r\n  i: number;\r\n  piece: Piece | null;\r\n  handleClick: (i: number, k: number) => void;\r\n  clickNothing: () => void;\r\n  active: boolean;\r\n}\r\n\r\nconst Square: React.FC<Props> = (props) => {\r\n  const handleClick = () => {\r\n    if (props.piece == null && !props.active) props.clickNothing();\r\n    else props.handleClick(props.i, props.k);\r\n  };\r\n  return (\r\n    <div\r\n      onClick={handleClick}\r\n      className=\"box\"\r\n      style={{\r\n        boxShadow: `0 0 40px 1px ${\r\n          props.active ? (props.piece ? \"red\" : \"yellow\") : \"transparent\"\r\n        } inset`,\r\n      }}\r\n    >\r\n      {props.piece && (\r\n        <img\r\n          src={\r\n            process.env.PUBLIC_URL +\r\n            `/gfx/${props.piece.color}${props.piece.type}.png`\r\n          }\r\n          alt={`${props.piece.color} ${props.piece.type}`}\r\n          style={{ margin: \"auto\", height: \"80%\" }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","export class Piece {\r\n  constructor(\r\n    type: \"King\" | \"Rook\" | \"Knight\" | \"Bishop\" | \"Pawn\" | \"Queen\",\r\n    color: \"W\" | \"B\"\r\n  ) {\r\n    this.type = type;\r\n    this.color = color;\r\n    const multiplier = color === \"W\" ? 1 : -1;\r\n    if (type === \"King\") this.importance = 10000 * multiplier;\r\n    else if (type === \"Queen\") this.importance = 2000 * multiplier;\r\n    else if (type === \"Knight\") this.importance = 200 * multiplier;\r\n    else if (type === \"Rook\") this.importance = 150 * multiplier;\r\n    else if (type === \"Bishop\") this.importance = 150 * multiplier;\r\n    else this.importance = 50 * multiplier;\r\n  }\r\n\r\n  type: String = \"\";\r\n  color: String = \"\";\r\n  canMoveTo: boolean[][] = [\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n  ];\r\n  numOfMoves: number = 0;\r\n  turnsSinceLastMove: number = 0;\r\n  importance: number;\r\n}\r\n","import { Piece } from \"./Piece\";\r\n\r\nexport const initialBoard: (Piece | any)[][] = [\r\n  [\r\n    new Piece(\"Rook\", \"B\"),\r\n    new Piece(\"Knight\", \"B\"),\r\n    new Piece(\"Bishop\", \"B\"),\r\n    new Piece(\"Queen\", \"B\"),\r\n    new Piece(\"King\", \"B\"),\r\n    new Piece(\"Bishop\", \"B\"),\r\n    new Piece(\"Knight\", \"B\"),\r\n    new Piece(\"Rook\", \"B\"),\r\n  ],\r\n  [\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n  ],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n  ],\r\n  [\r\n    new Piece(\"Rook\", \"W\"),\r\n    new Piece(\"Knight\", \"W\"),\r\n    new Piece(\"Bishop\", \"W\"),\r\n    new Piece(\"Queen\", \"W\"),\r\n    new Piece(\"King\", \"W\"),\r\n    new Piece(\"Bishop\", \"W\"),\r\n    new Piece(\"Knight\", \"W\"),\r\n    new Piece(\"Rook\", \"W\"),\r\n  ],\r\n];\r\n\r\nexport const initiallyCanMoveTo: boolean[][] = [\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n];\r\n","import { Piece } from \"./Piece\";\r\nimport { initiallyCanMoveTo } from \"./InitialPosition\";\r\n\r\n// TODO:\r\n// Stalemate\r\n\r\n// Done:\r\n// Ban illegal moves\r\n// en passant\r\n// Castling\r\n// Pawn promotion\r\n\r\nexport const valueOfPiece = (\r\n  type: \"King\" | \"Rook\" | \"Knight\" | \"Bishop\" | \"Pawn\" | \"Queen\"\r\n) => {\r\n  switch (type) {\r\n    case \"King\":\r\n      return 1000;\r\n    case \"Rook\":\r\n      return 100;\r\n    case \"Knight\":\r\n      return 150;\r\n    case \"Bishop\":\r\n      return 100;\r\n    case \"Pawn\":\r\n      return 30;\r\n    case \"Queen\":\r\n      return 500;\r\n  }\r\n};\r\n\r\nexport const Rook = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance = 150;\r\n  const doesThisHorizontalMoveResultInCheck = (i: number, r: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[i][r] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n  const doesThisVerticalMoveResultInCheck = (r: number, j: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[r][j] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      //For boxes above the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisVerticalMoveResultInCheck(r, j)) break;\r\n      } else if (doesThisVerticalMoveResultInCheck(r, j)) continue;\r\n\r\n      if (piece === null) canMoveTo[r][j] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[r][j] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      //For boxes below the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisVerticalMoveResultInCheck(r, j)) break;\r\n      } else if (doesThisVerticalMoveResultInCheck(r, j)) continue;\r\n\r\n      if (piece === null) canMoveTo[r][j] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[r][j] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      //For boxes left to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisHorizontalMoveResultInCheck(i, r)) break;\r\n      } else if (doesThisHorizontalMoveResultInCheck(i, r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i][r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i][r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      //For boxes right to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisHorizontalMoveResultInCheck(i, r)) break;\r\n      } else if (doesThisHorizontalMoveResultInCheck(i, r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i][r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i][r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Knight = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance = 200;\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight up and 1 left,\r\n  // Knight moving 2 straight up and 1 right,\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 2][j - 1] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 2][j - 1] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i - 2][j + 1] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i - 2][j + 1] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i + 2][j - 1] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i + 2][j - 1] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 2][j + 1] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 2][j + 1] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 1][j - 2] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 1][j - 2] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 1][j - 2] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 1][j - 2] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 1][j + 2] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 1][j + 2] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 1][j + 2] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 1][j + 2] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Bishop = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 150;\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i - r][j + r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i - r][j + r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i + r][j + r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i + r][j + r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j - r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i + r][j - r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i + r][j - r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n\r\n      const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - r][j - r] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n      };\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i - r][j - r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i - r][j - r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const King = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 10000;\r\n  // Castling:\r\n  let king = Board[i][j];\r\n  let rook = Board[i][j + 3];\r\n  if (\r\n    Board[i][j + 3] &&\r\n    Board[i][j + 3].type === \"Rook\" &&\r\n    // The king and rook involved in castling must not have previously moved;\r\n    king.numOfMoves === 0 &&\r\n    rook.numOfMoves === 0 &&\r\n    // There must be no pieces between the king and the rook;\r\n    Board[i][j + 1] === null &&\r\n    Board[i][j + 2] === null\r\n  ) {\r\n    // The king may not currently be in check, nor may the king pass through or end up in a square that is under\r\n    // attack by an enemy piece;\r\n    // checking whether the king would be under check if castling did happen:\r\n    const board = Board.map((inner) => inner.slice());\r\n    board[i][j + 1] = Board[i][j + 3];\r\n    board[i][j + 2] = Board[i][j];\r\n    board[i][j] = null;\r\n    board[i][j + 3] = null;\r\n    if (!isUnderCheck(board, turn === \"W\" ? \"B\" : \"W\"))\r\n      canMoveTo[i][j + 2] = true;\r\n  }\r\n\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i - 1][j] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j - 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i + 1][j] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i + 1][j - 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i + 1][j + 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j - 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i][j - 1] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j + 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i][j + 1] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Pawn = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 50;\r\n  Board[i][j].turnsSinceLastMove++;\r\n  // console.log(i, j, Board, turn);\r\n  if (turn === \"W\" && i !== 0) {\r\n    // if turn is white, pawns move up.\r\n    if (Board[i - 1][j] === null) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        canMoveTo[i - 1][j] = true; //Highlighting the box below the pawn.\r\n      if (\r\n        Board[i][j] &&\r\n        Board[i][j].numOfMoves === 0 &&\r\n        Board[i - 2][j] === null\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i - 2][j] = true;\r\n      }\r\n    }\r\n\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft !== null) {\r\n        if (upLeft.color === \"B\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j - 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i - 1][j - 1] = true;\r\n            importance += valueOfPiece(upLeft.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // En Passant\r\n        i === 3 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j - 1] = true;\r\n          importance += valueOfPiece(left.type);\r\n        }\r\n      }\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight !== null) {\r\n        if (upRight.color === \"B\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j + 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i - 1][j + 1] = true;\r\n            importance += valueOfPiece(upRight.type);\r\n          }\r\n        }\r\n      } else if (\r\n        //  En Passant\r\n        i === 3 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          importance += valueOfPiece(right.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (turn === \"B\" && i !== 7) {\r\n    // if turn is black, pawns move below.\r\n    if (Board[i + 1][j] === null) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        canMoveTo[i + 1][j] = true; //Highlighting the box above the pawn.\r\n      if (Board[i][j].numOfMoves === 0 && Board[i + 2][j] == null) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 2][j] = true;\r\n      }\r\n    }\r\n\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft !== null) {\r\n        if (upLeft.color === \"W\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i + 1][j - 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i + 1][j - 1] = true;\r\n            importance += valueOfPiece(upLeft.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // EN Passant\r\n        i === 4 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = newBoard[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j - 1] = true;\r\n        importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight !== null) {\r\n        if (upRight.color === \"W\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i + 1][j + 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i + 1][j + 1] = true;\r\n            importance += valueOfPiece(upRight.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // En Passant\r\n        i === 4 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = newBoard[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j + 1] = true;\r\n        importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const pieceStateUpdate = (board: (Piece | any)[][], turn: string) => {\r\n  let valueOfBoard: number = 0;\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j] && board[i][j].color === turn) {\r\n        board[i][j].canMoveTo = initiallyCanMoveTo.map((inner) =>\r\n          inner.slice()\r\n        );\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            Pawn(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Bishop\":\r\n            Bishop(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"King\":\r\n            King(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Queen\":\r\n            Bishop(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            Rook(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Rook\":\r\n            Rook(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Knight\":\r\n            Knight(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n        }\r\n        valueOfBoard += board[i][j].importance;\r\n      } else if (board[i][j]) valueOfBoard += board[i][j].importance;\r\n    }\r\n  }\r\n  return valueOfBoard;\r\n};\r\n\r\nconst PawnGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i === 0 || i === 7) return false;\r\n  if (Board[i][j].color === \"W\") {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      if (upLeft !== null && upLeft.color === \"B\" && upLeft.type == \"King\")\r\n        return true;\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      if (upRight !== null && upRight.color === \"B\" && upRight.type == \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (Board[i][j].color === \"B\") {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      if (upLeft !== null && upLeft.color === \"W\" && upLeft.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      if (upRight !== null && upRight.color === \"W\" && upRight.type == \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst RookGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      let unit = Board[r][j];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      let unit = Board[r][j];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      let unit = Board[i][r];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      let unit = Board[i][r];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst KnightGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst BishopGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst KingGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// checkForWhom will be opposite color of the piece that called this function.\r\nexport const isUnderCheck = (\r\n  board: (Piece | any)[][],\r\n  checkForWhom: String\r\n) => {\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j] && board[i][j].color === checkForWhom) {\r\n        let isGivingCheck: boolean | undefined = false;\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            isGivingCheck = PawnGivesCheck(i, j, board);\r\n            break;\r\n          case \"Bishop\":\r\n            isGivingCheck = BishopGivesCheck(i, j, board);\r\n            break;\r\n          case \"King\":\r\n            isGivingCheck = KingGivesCheck(i, j, board);\r\n            break;\r\n          case \"Queen\":\r\n            isGivingCheck = BishopGivesCheck(i, j, board);\r\n            if (!isGivingCheck) isGivingCheck = RookGivesCheck(i, j, board);\r\n            break;\r\n          case \"Rook\":\r\n            isGivingCheck = RookGivesCheck(i, j, board);\r\n            break;\r\n          case \"Knight\":\r\n            isGivingCheck = KnightGivesCheck(i, j, board);\r\n            break;\r\n        }\r\n        if (isGivingCheck) return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n","import { Piece } from \"./Piece\";\r\nimport { valueOfPiece, isUnderCheck } from \"./pieceLogic\";\r\n\r\n// These functions are same as the ones in pieceLogic.ts but\r\n// these don't change the pieces' canMoveTo property\r\n\r\nexport const PawnScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  const turn = Board[i][j].color;\r\n  let importance: number = 50;\r\n  if (turn === \"W\" && i !== 0) {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      if (upLeft && upLeft.color === \"B\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upLeft.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n        else if (\r\n          // En Passant\r\n          i === 3 &&\r\n          left &&\r\n          left.numOfMoves === 1 &&\r\n          left.turnsSinceLastMove === 0\r\n        ) {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j - 1] = Board[i][j];\r\n          newBoard[i][j - 1] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      */\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight && upRight.color === \"B\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upRight.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n      \r\n      else if (\r\n        //  En Passant\r\n        i === 3 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          importance += valueOfPiece(right.type);\r\n        }\r\n      }\r\n      */\r\n    }\r\n  }\r\n\r\n  if (turn === \"B\" && i !== 7) {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft && upLeft.color === \"W\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upLeft.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n      else if (\r\n        // EN Passant\r\n        i === 4 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = newBoard[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j - 1] = true;\r\n        importance += valueOfPiece(left.type);\r\n      }\r\n      */\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight && upRight.color === \"W\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upRight.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n      else if (\r\n        // En Passant\r\n        i === 4 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = newBoard[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j + 1] = true;\r\n        importance += valueOfPiece(right.type);\r\n      }\r\n      */\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const RookScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance = 150;\r\n  const turn = Board[i][j].color;\r\n  const doesThisHorizontalMoveResultInCheck = (i: number, r: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[i][r] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n  const doesThisVerticalMoveResultInCheck = (r: number, j: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[r][j] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      //For boxes above the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisVerticalMoveResultInCheck(r, j))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      //For boxes below the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisVerticalMoveResultInCheck(r, j))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      //For boxes left to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisHorizontalMoveResultInCheck(i, r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      //For boxes right to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisHorizontalMoveResultInCheck(i, r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const BishopScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance: number = 150;\r\n  const turn = Board[i][j].color;\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j - r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n\r\n      const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - r][j - r] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n      };\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const KingScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance: number = 10000;\r\n  const turn = Board[i][j].color;\r\n\r\n  /*  Castling:\r\n  let king = Board[i][j];\r\n  let rook = Board[i][j + 3];\r\n  if (\r\n    Board[i][j + 3] &&\r\n    Board[i][j + 3].type === \"Rook\" &&\r\n    // The king and rook involved in castling must not have previously moved;\r\n    king.numOfMoves === 0 &&\r\n    rook.numOfMoves === 0 &&\r\n    // There must be no pieces between the king and the rook;\r\n    Board[i][j + 1] === null &&\r\n    Board[i][j + 2] === null\r\n  ) {\r\n    // The king may not currently be in check, nor may the king pass through or end up in a square that is under\r\n    // attack by an enemy piece;\r\n    // checking whether the king would be under check if castling did happen:\r\n    const board = Board.map((inner) => inner.slice());\r\n    board[i][j + 1] = Board[i][j + 3];\r\n    board[i][j + 2] = Board[i][j];\r\n    board[i][j] = null;\r\n    board[i][j + 3] = null;\r\n    if (!isUnderCheck(board, turn === \"W\" ? \"B\" : \"W\"))\r\n      canMoveTo[i][j + 2] = true;\r\n  }\r\n  */\r\n\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j - 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j + 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const KnightScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance = 200;\r\n  const turn = Board[i][j].color;\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight up and 1 left,\r\n  // Knight moving 2 straight up and 1 right,\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n","import { Piece } from \"./Piece\";\r\nimport { pieceStateUpdate } from \"./pieceLogic\";\r\nimport {\r\n  PawnScore,\r\n  RookScore,\r\n  BishopScore,\r\n  KingScore,\r\n  KnightScore,\r\n} from \"./AnalysePosition\";\r\n\r\nexport class fromTo {\r\n  constructor(\r\n    i: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    j: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    x: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    y: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number\r\n  ) {\r\n    this.i = i;\r\n    this.j = j;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  // i, j represent move from.\r\n  i: number;\r\n  j: number;\r\n  // x, y represent moved to.\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst MinMax = (\r\n  board: (Piece | any)[][],\r\n  turn: \"W\" | \"B\",\r\n  iterationsLeft: number,\r\n  alpha: number,\r\n  beta: number\r\n): { score: number; moveToMake: fromTo } => {\r\n  // If this move is the bottom-most move in the MinMax search tree\r\n  if (iterationsLeft === 0)\r\n    return {\r\n      score: analyseBoard(board),\r\n      moveToMake: new fromTo(1, 1, 1, 1),\r\n    };\r\n\r\n  // let scoresAndMoves: any = {};\r\n  let bestScoreYet = turn === \"W\" ? -100000 : 100000;\r\n  let bestMoveYet: fromTo;\r\n  const returnValue = () => {\r\n    return { score: bestScoreYet, moveToMake: bestMoveYet };\r\n  };\r\n\r\n  // Create a copy of the piece because piece.canMoveTo will change.\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n  pieceStateUpdate(newBoard, turn);\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      let count = 0;\r\n      // board[i][j] represents each piece.\r\n      if (!newBoard[i][j] || newBoard[i][j].color !== turn) continue;\r\n      for (let x = 0; x < 8; x++) {\r\n        for (let y = 0; y < 8; y++) {\r\n          let piece = newBoard[i][j];\r\n          // board[i][j].canMoveTo represents each possible move by board[i][j].\r\n          // Check board[i][j].canMoveTo[x][y], play that move, analyse and save the new score\r\n          if (piece.canMoveTo[x][y]) {\r\n            count++;\r\n            // console.log(i, j, x, y, board[i][j].canMoveTo);\r\n            let copyOfNewBoard = newBoard.map((inner: any) => inner.slice());\r\n            copyOfNewBoard[x][y] = copyOfNewBoard[i][j];\r\n            copyOfNewBoard[i][j] = null;\r\n\r\n            // Call MinMax again recursively on the new state of the Board.\r\n            // pieceStateUpdate(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n            let { score: scoreToSend, moveToMake } = MinMax(\r\n              copyOfNewBoard,\r\n              turn === \"W\" ? \"B\" : \"W\",\r\n              iterationsLeft - 1,\r\n              alpha,\r\n              beta\r\n            );\r\n            let thisMove = new fromTo(i, j, x, y);\r\n\r\n            // scoresAndMoves[scoreToSend] = thisMove;\r\n\r\n            if (\r\n              turn === \"W\"\r\n                ? scoreToSend > bestScoreYet\r\n                : scoreToSend < bestScoreYet\r\n            ) {\r\n              bestScoreYet = scoreToSend;\r\n              bestMoveYet = thisMove;\r\n            }\r\n\r\n            if (turn === \"W\" && scoreToSend !== 100000) {\r\n              alpha = Math.max(alpha, scoreToSend, -100000);\r\n            } else if (scoreToSend !== -100000) {\r\n              beta = Math.min(beta, scoreToSend, 100000);\r\n            }\r\n\r\n            if (beta <= alpha) {\r\n              // console.log(\"Broke out after \" + count + \" iterations\");\r\n              return returnValue();\r\n            }\r\n\r\n            // Alpha-Beta Pruning\r\n            // Alpha is high, Beta is low\r\n            // Beta: The value returned is the maximum in the sub-tree\r\n            // Alpha represents the minimum best value. Beta represents the maximum best value\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return returnValue();\r\n};\r\n\r\nexport default MinMax;\r\n\r\nconst analyseBoard = (board: (Piece | any)[][]) => {\r\n  let valueOfBoard: number = 0;\r\n  // board = JSON.parse(JSON.stringify(board));\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j]) {\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            PawnScore(i, j, board);\r\n            break;\r\n          case \"Bishop\":\r\n            BishopScore(i, j, board);\r\n            break;\r\n          case \"King\":\r\n            KingScore(i, j, board);\r\n            break;\r\n          case \"Queen\":\r\n            BishopScore(i, j, board);\r\n            RookScore(i, j, board);\r\n            break;\r\n          case \"Rook\":\r\n            RookScore(i, j, board);\r\n            break;\r\n          case \"Knight\":\r\n            KnightScore(i, j, board);\r\n            break;\r\n        }\r\n        valueOfBoard += board[i][j].importance;\r\n      }\r\n    }\r\n  }\r\n  return valueOfBoard;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Piece } from \"../game/Piece\";\r\nimport Square from \"../components/Square\";\r\nimport { initialBoard, initiallyCanMoveTo } from \"../game/InitialPosition\";\r\nimport { pieceStateUpdate } from \"../game/pieceLogic\";\r\nimport MinMax, { fromTo } from \"../game/MinMax\";\r\n\r\npieceStateUpdate(initialBoard, \"W\");\r\n\r\nconst Board: React.FC = () => {\r\n  const [board, setBoard] = useState(() => initialBoard);\r\n  const [previousClick, setPreviousClick] = useState([4, 4]);\r\n  const [turn, setTurn] = useState(\"W\");\r\n  const [canMoveToHighlighted, setCanMoveToHighlighted] = useState(() => [\r\n    ...initiallyCanMoveTo,\r\n  ]);\r\n  const clickNothing = () => {\r\n    setCanMoveToHighlighted(initiallyCanMoveTo.map((inner) => inner.slice()));\r\n    setPreviousClick([9, 9]);\r\n  };\r\n\r\n  const movePiece = (\r\n    previousBoard: (Piece | any)[][],\r\n    i: number,\r\n    k: number\r\n  ) => {\r\n    // Create a copy of the previous board\r\n    let newBoard = previousBoard.map((inner) => inner.slice());\r\n    if (newBoard[i][k] && newBoard[i][k].type === \"King\") {\r\n      // Game over here\r\n      alert(\"Game over\");\r\n    }\r\n\r\n    // Check for Castling:\r\n    if (\r\n      k === 6 &&\r\n      (i === 0 || i === 7) &&\r\n      previousClick[1] === 4 &&\r\n      (previousClick[0] === 0 || previousClick[0] === 7) &&\r\n      previousBoard[previousClick[0]][previousClick[1]].type === \"King\"\r\n    ) {\r\n      newBoard[i][k - 1] = previousBoard[previousClick[0]][7];\r\n      newBoard[i][7] = null;\r\n      newBoard[i][k - 1].numOfMoves++;\r\n    }\r\n\r\n    // Check for En Passant:\r\n    if (\r\n      (i === 2 &&\r\n        previousBoard[i + 1][k] &&\r\n        previousBoard[i + 1][k].type === \"Pawn\" &&\r\n        previousBoard[previousClick[0]][previousClick[1]].type === \"Pawn\") ||\r\n      (i === 5 &&\r\n        previousBoard[i - 1][k] &&\r\n        previousBoard[i - 1][k].type === \"Pawn\" &&\r\n        previousBoard[previousClick[0]][previousClick[1]].type === \"Pawn\")\r\n    )\r\n      newBoard[i === 2 ? 3 : 4][k] = null;\r\n\r\n    // Pawn Promotion\r\n    if (\r\n      (i === 0 &&\r\n        previousBoard[1][k] &&\r\n        previousBoard[1][k].color === \"W\" &&\r\n        previousBoard[1][k].type === \"Pawn\") ||\r\n      (i === 7 &&\r\n        previousBoard[6][k] &&\r\n        previousBoard[6][k].color === \"B\" &&\r\n        previousBoard[6][k].type === \"Pawn\")\r\n    )\r\n      previousBoard[i === 0 ? 1 : 6][k].type = \"Queen\";\r\n\r\n    newBoard[i][k] = previousBoard[previousClick[0]][previousClick[1]];\r\n    newBoard[previousClick[0]][previousClick[1]] = null;\r\n    newBoard[i][k].numOfMoves++;\r\n    newBoard[i][k].turnsSinceLastMove = 0;\r\n\r\n    // (piecesGivingCheck = [[i, k,], [i, k]]) piece locations that can directly kill the King in the next turn\r\n    // pieceStateUpdate(newBoard, turn);\r\n    return newBoard;\r\n  };\r\n\r\n  const handleClick = (i: number, k: number) => {\r\n    // If it's W's turn and they click B's Piece\r\n    if (\r\n      board[i][k] &&\r\n      turn !== board[i][k].color &&\r\n      !canMoveToHighlighted[i][k]\r\n    )\r\n      return;\r\n\r\n    // If clicking on the same box that the user previously clicked\r\n    if (i === previousClick[0] && k === previousClick[1]) return;\r\n\r\n    // If the Piece that the user previously clicked on can move to [i, k]\r\n    if (canMoveToHighlighted[i][k] == true) {\r\n      const newBoard = movePiece(board, i, k);\r\n      setBoard(newBoard);\r\n      setCanMoveToHighlighted(initiallyCanMoveTo.map((inner) => inner.slice()));\r\n\r\n      let { score: scoreToSend, moveToMake } = MinMax(\r\n        newBoard,\r\n        \"B\",\r\n        2,\r\n        -100000,\r\n        100000\r\n      );\r\n      if (scoreToSend === 100000) {\r\n        alert(\"CheckMate! You defeated the AI :)\");\r\n        return;\r\n      }\r\n      setBoard((previousBoard) => {\r\n        let newBoard = previousBoard.map((inner) => inner.slice());\r\n        newBoard[moveToMake.x][moveToMake.y] =\r\n          newBoard[moveToMake.i][moveToMake.j];\r\n        newBoard[moveToMake.i][moveToMake.j] = null;\r\n        newBoard[moveToMake.x][moveToMake.y].numOfMoves++;\r\n        pieceStateUpdate(newBoard, \"W\");\r\n        setCanMoveToHighlighted((previousCanMoveTo) => {\r\n          let toReturn = initiallyCanMoveTo.map((inner) => inner.slice());\r\n          toReturn[moveToMake.x][moveToMake.y] = true;\r\n          toReturn[moveToMake.i][moveToMake.j] = true;\r\n          setPreviousClick([moveToMake.x, moveToMake.y]);\r\n          return toReturn;\r\n        });\r\n        return newBoard;\r\n      });\r\n      setTurn(\"W\");\r\n    } else {\r\n      setCanMoveToHighlighted((canMoveTo) => {\r\n        let newCanMoveTo = board[i][k].canMoveTo.map((inner: any): boolean[] =>\r\n          inner.slice()\r\n        );\r\n        newCanMoveTo[i][k] = true;\r\n        return newCanMoveTo;\r\n      });\r\n\r\n      setPreviousClick([i, k]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"app_board\" style={{ margin: \"auto\" }}>\r\n        {board.map((rows: Piece[][] | any, i: number) => (\r\n          <span className=\"row\">\r\n            {rows.map((col: Piece[], k: number) => (\r\n              <Square\r\n                clickNothing={clickNothing}\r\n                k={k}\r\n                i={i}\r\n                key={`${i}_${k}`}\r\n                piece={board[i][k]}\r\n                handleClick={handleClick}\r\n                active={canMoveToHighlighted[i][k]}\r\n              />\r\n            ))}\r\n          </span>\r\n        ))}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\n// import { Piece } from \"./game/Piece\";\n\nconst App: React.FC = () => {\n  return (\n    <main className=\"app\">\n      <Board />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}