{"version":3,"sources":["components/Square.tsx","game/Piece.ts","game/InitialPosition.ts","game/pieceLogic.ts","game/AnalysePosition.ts","game/MinMax.ts","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","props","background","color","i","k","onClick","piece","active","handleClick","clickNothing","style","display","width","height","backgroundColor","boxShadow","border","boxSizing","src","process","type","alt","margin","Piece","canMoveTo","numOfMoves","turnsSinceLastMove","importance","this","multiplier","initialBoard","initiallyCanMoveTo","valueOfPiece","Rook","j","Board","turn","doesThisHorizontalMoveResultInCheck","r","newBoard","map","inner","slice","isUnderCheck","doesThisVerticalMoveResultInCheck","Knight","left","thisMoveWillResultInCheck","right","Bishop","isUnderCheckIfThisMoveHappens","King","king","rook","board","Pawn","upLeft","upRight","pieceStateUpdate","valueOfBoard","PawnGivesCheck","RookGivesCheck","unit","KnightGivesCheck","BishopGivesCheck","KingGivesCheck","checkForWhom","isGivingCheck","PawnScore","RookScore","BishopScore","KingScore","KnightScore","fromTo","x","y","MinMax","iterationsLeft","alpha","beta","score","analyseBoard","moveToMake","scoresAndMoves","JSON","parse","stringify","count","scoreToSend","thisMove","console","log","intScore","parseInt","Object","keys","length","returnValue","useState","setBoard","previousClick","setPreviousClick","setTurn","canMoveToHighlighted","setCanMoveToHighlighted","previousBoard","alert","movePiece","previousCanMoveTo","toReturn","newCanMoveTo","className","rows","col","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0317c90b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Piece } from \"../game/Piece\";\r\n\r\ninterface Props {\r\n  k: number;\r\n  i: number;\r\n  piece: Piece | null;\r\n  handleClick: (i: number, k: number) => void;\r\n  clickNothing: () => void;\r\n  active: boolean;\r\n}\r\n\r\nconst Square: React.FC<Props> = (props) => {\r\n  let background = \"rgb(208, 139, 76)\";\r\n  let color = \"white\";\r\n\r\n  if ((props.i + props.k) % 2 == 0) {\r\n    background = \"rgb(254, 206, 161)\";\r\n    color = \"black\";\r\n  }\r\n  const handleClick = () => {\r\n    if (props.piece == null && !props.active) props.clickNothing();\r\n    else props.handleClick(props.i, props.k);\r\n  };\r\n  return (\r\n    <div\r\n      onClick={handleClick}\r\n      style={{\r\n        display: \"flex\",\r\n        width: 100,\r\n        height: 100,\r\n        backgroundColor: background,\r\n        boxShadow: `0 0 40px 1px ${\r\n          props.active ? (props.piece ? \"red\" : \"yellow\") : \"transparent\"\r\n        } inset`,\r\n        color,\r\n        border: `1px solid black  `,\r\n        boxSizing: \"border-box\",\r\n      }}\r\n    >\r\n      {props.piece && (\r\n        <img\r\n          src={\r\n            process.env.PUBLIC_URL +\r\n            `/gfx/${props.piece.color}${props.piece.type}.png`\r\n          }\r\n          alt={`${props.piece.color} ${props.piece.type}`}\r\n          style={{ margin: \"auto\", height: \"80%\" }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","export class Piece {\r\n  constructor(\r\n    type: \"King\" | \"Rook\" | \"Knight\" | \"Bishop\" | \"Pawn\" | \"Queen\",\r\n    color: \"W\" | \"B\"\r\n  ) {\r\n    this.type = type;\r\n    this.color = color;\r\n    const multiplier = color === \"W\" ? 1 : -1;\r\n    if (type === \"King\") this.importance = 10000 * multiplier;\r\n    else if (type === \"Queen\") this.importance = 1000 * multiplier;\r\n    else if (type === \"Knight\") this.importance = 200 * multiplier;\r\n    else if (type === \"Rook\") this.importance = 150 * multiplier;\r\n    else if (type === \"Bishop\") this.importance = 150 * multiplier;\r\n    else this.importance = 50 * multiplier;\r\n  }\r\n\r\n  type: String = \"\";\r\n  color: String = \"\";\r\n  canMoveTo: boolean[][] = [\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n    [false, false, false, false, false, false, false, false],\r\n  ];\r\n  numOfMoves: number = 0;\r\n  turnsSinceLastMove: number = 0;\r\n  importance: number;\r\n}\r\n","import { Piece } from \"./Piece\";\r\n\r\nexport const initialBoard: (Piece | any)[][] = [\r\n  [\r\n    new Piece(\"Rook\", \"B\"),\r\n    new Piece(\"Knight\", \"B\"),\r\n    new Piece(\"Bishop\", \"B\"),\r\n    new Piece(\"Queen\", \"B\"),\r\n    new Piece(\"King\", \"B\"),\r\n    new Piece(\"Bishop\", \"B\"),\r\n    new Piece(\"Knight\", \"B\"),\r\n    new Piece(\"Rook\", \"B\"),\r\n  ],\r\n  [\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n    new Piece(\"Pawn\", \"B\"),\r\n  ],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n    new Piece(\"Pawn\", \"W\"),\r\n  ],\r\n  [\r\n    new Piece(\"Rook\", \"W\"),\r\n    new Piece(\"Knight\", \"W\"),\r\n    new Piece(\"Bishop\", \"W\"),\r\n    new Piece(\"Queen\", \"W\"),\r\n    new Piece(\"King\", \"W\"),\r\n    new Piece(\"Bishop\", \"W\"),\r\n    new Piece(\"Knight\", \"W\"),\r\n    new Piece(\"Rook\", \"W\"),\r\n  ],\r\n];\r\n\r\nexport const initiallyCanMoveTo: boolean[][] = [\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n  [false, false, false, false, false, false, false, false],\r\n];\r\n","import { Piece } from \"./Piece\";\r\nimport { initiallyCanMoveTo } from \"./InitialPosition\";\r\n\r\n// TODO:\r\n// Stalemate\r\n\r\n// Done:\r\n// Ban illegal moves\r\n// en passant\r\n// Castling\r\n// Pawn promotion\r\n\r\nexport const valueOfPiece = (\r\n  type: \"King\" | \"Rook\" | \"Knight\" | \"Bishop\" | \"Pawn\" | \"Queen\"\r\n) => {\r\n  switch (type) {\r\n    case \"King\":\r\n      return 5000;\r\n    case \"Rook\":\r\n      return 100;\r\n    case \"Knight\":\r\n      return 150;\r\n    case \"Bishop\":\r\n      return 100;\r\n    case \"Pawn\":\r\n      return 30;\r\n    case \"Queen\":\r\n      return 500;\r\n  }\r\n};\r\n\r\nexport const Rook = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance = 150;\r\n  const doesThisHorizontalMoveResultInCheck = (i: number, r: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[i][r] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n  const doesThisVerticalMoveResultInCheck = (r: number, j: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[r][j] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      //For boxes above the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisVerticalMoveResultInCheck(r, j)) break;\r\n      } else if (doesThisVerticalMoveResultInCheck(r, j)) continue;\r\n\r\n      if (piece === null) canMoveTo[r][j] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[r][j] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      //For boxes below the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisVerticalMoveResultInCheck(r, j)) break;\r\n      } else if (doesThisVerticalMoveResultInCheck(r, j)) continue;\r\n\r\n      if (piece === null) canMoveTo[r][j] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[r][j] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      //For boxes left to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisHorizontalMoveResultInCheck(i, r)) break;\r\n      } else if (doesThisHorizontalMoveResultInCheck(i, r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i][r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i][r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      //For boxes right to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        if (doesThisHorizontalMoveResultInCheck(i, r)) break;\r\n      } else if (doesThisHorizontalMoveResultInCheck(i, r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i][r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i][r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Knight = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance = 200;\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight up and 1 left,\r\n  // Knight moving 2 straight up and 1 right,\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 2][j - 1] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 2][j - 1] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i - 2][j + 1] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i - 2][j + 1] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i + 2][j - 1] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i + 2][j - 1] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 2][j + 1] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 2][j + 1] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 1][j - 2] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 1][j - 2] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 1][j - 2] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 1][j - 2] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!left || left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (left === null) canMoveTo[i - 1][j + 2] = true;\r\n        else {\r\n          if (left.color !== turn) {\r\n            canMoveTo[i - 1][j + 2] = true;\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n      let thisMoveWillResultInCheck = false;\r\n\r\n      if (!right || right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        thisMoveWillResultInCheck = isUnderCheck(\r\n          newBoard,\r\n          turn === \"W\" ? \"B\" : \"W\"\r\n        );\r\n      }\r\n\r\n      if (!thisMoveWillResultInCheck) {\r\n        if (right === null) canMoveTo[i + 1][j + 2] = true;\r\n        else {\r\n          if (right.color !== turn) {\r\n            canMoveTo[i + 1][j + 2] = true;\r\n            importance += valueOfPiece(right.type);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Bishop = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 150;\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i - r][j + r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i - r][j + r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i + r][j + r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i + r][j + r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j - r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i + r][j - r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i + r][j - r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n\r\n      const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - r][j - r] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n      };\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (isUnderCheckIfThisMoveHappens(r)) break;\r\n      } else if (isUnderCheckIfThisMoveHappens(r)) continue;\r\n\r\n      if (piece === null) canMoveTo[i - r][j - r] = true;\r\n      else {\r\n        if (piece.color !== turn) {\r\n          canMoveTo[i - r][j - r] = true;\r\n          importance += valueOfPiece(piece.type);\r\n        }\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const King = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 10000;\r\n  // Castling:\r\n  let king = Board[i][j];\r\n  let rook = Board[i][j + 3];\r\n  if (\r\n    Board[i][j + 3] &&\r\n    Board[i][j + 3].type === \"Rook\" &&\r\n    // The king and rook involved in castling must not have previously moved;\r\n    king.numOfMoves === 0 &&\r\n    rook.numOfMoves === 0 &&\r\n    // There must be no pieces between the king and the rook;\r\n    Board[i][j + 1] === null &&\r\n    Board[i][j + 2] === null\r\n  ) {\r\n    // The king may not currently be in check, nor may the king pass through or end up in a square that is under\r\n    // attack by an enemy piece;\r\n    // checking whether the king would be under check if castling did happen:\r\n    const board = Board.map((inner) => inner.slice());\r\n    board[i][j + 1] = Board[i][j + 3];\r\n    board[i][j + 2] = Board[i][j];\r\n    board[i][j] = null;\r\n    board[i][j + 3] = null;\r\n    if (!isUnderCheck(board, turn === \"W\" ? \"B\" : \"W\"))\r\n      canMoveTo[i][j + 2] = true;\r\n  }\r\n\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i - 1][j] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j - 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i + 1][j] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i + 1][j - 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i + 1][j + 1] = true;\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j - 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i][j - 1] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j + 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n        canMoveTo[i][j + 1] = true;\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\nexport const Pawn = (\r\n  i: number,\r\n  j: number,\r\n  canMoveTo: boolean[][],\r\n  Board: (Piece | any)[][],\r\n  turn: String\r\n) => {\r\n  let importance: number = 50;\r\n  Board[i][j].turnsSinceLastMove++;\r\n  // console.log(i, j, Board, turn);\r\n  if (turn === \"W\") {\r\n    // if turn is white, pawns move up.\r\n    if (Board[i - 1][j] === null) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        canMoveTo[i - 1][j] = true; //Highlighting the box below the pawn.\r\n      if (\r\n        Board[i][j] &&\r\n        Board[i][j].numOfMoves === 0 &&\r\n        Board[i - 2][j] === null\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i - 2][j] = true;\r\n      }\r\n    }\r\n\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft !== null) {\r\n        if (upLeft.color === \"B\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j - 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i - 1][j - 1] = true;\r\n            importance += valueOfPiece(upLeft.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // En Passant\r\n        i === 3 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j - 1] = true;\r\n          importance += valueOfPiece(left.type);\r\n        }\r\n      }\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight !== null) {\r\n        if (upRight.color === \"B\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j + 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i - 1][j + 1] = true;\r\n            importance += valueOfPiece(upRight.type);\r\n          }\r\n        }\r\n      } else if (\r\n        //  En Passant\r\n        i === 3 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          importance += valueOfPiece(right.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (turn === \"B\") {\r\n    // if turn is black, pawns move below.\r\n    if (Board[i + 1][j] === null) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        canMoveTo[i + 1][j] = true; //Highlighting the box above the pawn.\r\n      if (Board[i][j].numOfMoves === 0 && Board[i + 2][j] == null) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 2][j] = true;\r\n      }\r\n    }\r\n\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft !== null) {\r\n        if (upLeft.color === \"W\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i + 1][j - 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i + 1][j - 1] = true;\r\n            importance += valueOfPiece(upLeft.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // EN Passant\r\n        i === 4 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = newBoard[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j - 1] = true;\r\n        importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight !== null) {\r\n        if (upRight.color === \"W\") {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i + 1][j + 1] = Board[i][j];\r\n          newBoard[i][j] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            canMoveTo[i + 1][j + 1] = true;\r\n            importance += valueOfPiece(upRight.type);\r\n          }\r\n        }\r\n      } else if (\r\n        // En Passant\r\n        i === 4 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = newBoard[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j + 1] = true;\r\n        importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const pieceStateUpdate = (board: (Piece | any)[][], turn: string) => {\r\n  let valueOfBoard: number = 0;\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j] && board[i][j].color === turn) {\r\n        board[i][j].canMoveTo = initiallyCanMoveTo.map((inner) =>\r\n          inner.slice()\r\n        );\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            Pawn(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Bishop\":\r\n            Bishop(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"King\":\r\n            King(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Queen\":\r\n            Bishop(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            Rook(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Rook\":\r\n            Rook(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n          case \"Knight\":\r\n            Knight(i, j, board[i][j].canMoveTo, board, board[i][j].color);\r\n            break;\r\n        }\r\n        valueOfBoard += board[i][j].importance;\r\n      } else if (board[i][j]) valueOfBoard += board[i][j].importance;\r\n    }\r\n  }\r\n  return valueOfBoard;\r\n};\r\n\r\nconst PawnGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i === 0 || i === 7) return false;\r\n  if (Board[i][j].color === \"W\") {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      if (upLeft !== null && upLeft.color === \"B\" && upLeft.type == \"King\")\r\n        return true;\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      if (upRight !== null && upRight.color === \"B\" && upRight.type == \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (Board[i][j].color === \"B\") {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      if (upLeft !== null && upLeft.color === \"W\" && upLeft.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      if (upRight !== null && upRight.color === \"W\" && upRight.type == \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst RookGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      let unit = Board[r][j];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      let unit = Board[r][j];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      let unit = Board[i][r];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      let unit = Board[i][r];\r\n      if (\r\n        unit &&\r\n        (unit.color === Board[i][j].color ||\r\n          (unit.color !== Board[i][j].color && unit.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (unit && unit.color !== Board[i][j].color && unit.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst KnightGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n\r\n      if (left && left.color !== Board[i][j].color && left.type === \"King\")\r\n        return true;\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n\r\n      if (right && right.color !== Board[i][j].color && right.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst BishopGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n      if (\r\n        piece &&\r\n        (piece.color === Board[i][j].color ||\r\n          (piece.color !== Board[i][j].color && piece.type !== \"King\"))\r\n      )\r\n        break;\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    } else break;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst KingGivesCheck = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n      if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n        return true;\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n    if (piece && piece.color !== Board[i][j].color && piece.type === \"King\")\r\n      return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// checkForWhom will be opposite color of the piece that called this function.\r\nexport const isUnderCheck = (\r\n  board: (Piece | any)[][],\r\n  checkForWhom: String\r\n) => {\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j] && board[i][j].color === checkForWhom) {\r\n        let isGivingCheck: boolean | undefined = false;\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            isGivingCheck = PawnGivesCheck(i, j, board);\r\n            break;\r\n          case \"Bishop\":\r\n            isGivingCheck = BishopGivesCheck(i, j, board);\r\n            break;\r\n          case \"King\":\r\n            isGivingCheck = KingGivesCheck(i, j, board);\r\n            break;\r\n          case \"Queen\":\r\n            isGivingCheck = BishopGivesCheck(i, j, board);\r\n            if (!isGivingCheck) isGivingCheck = RookGivesCheck(i, j, board);\r\n            break;\r\n          case \"Rook\":\r\n            isGivingCheck = RookGivesCheck(i, j, board);\r\n            break;\r\n          case \"Knight\":\r\n            isGivingCheck = KnightGivesCheck(i, j, board);\r\n            break;\r\n        }\r\n        if (isGivingCheck) return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n","import { Piece } from \"./Piece\";\r\nimport { valueOfPiece, isUnderCheck } from \"./pieceLogic\";\r\n\r\n// These functions are same as the ones in pieceLogic.ts but\r\n// these don't change the pieces' canMoveTo property\r\n\r\nexport const PawnScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  const turn = Board[i][j].color;\r\n  let importance: number = 50;\r\n  if (turn === \"W\" && i !== 0) {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i - 1][j - 1];\r\n      if (upLeft && upLeft.color === \"B\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upLeft.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n        else if (\r\n          // En Passant\r\n          i === 3 &&\r\n          left &&\r\n          left.numOfMoves === 1 &&\r\n          left.turnsSinceLastMove === 0\r\n        ) {\r\n          let newBoard = Board.map((inner) => inner.slice());\r\n          newBoard[i - 1][j - 1] = Board[i][j];\r\n          newBoard[i][j - 1] = null;\r\n          if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n            importance += valueOfPiece(left.type);\r\n          }\r\n        }\r\n      */\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i - 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight && upRight.color === \"B\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upRight.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n      \r\n      else if (\r\n        //  En Passant\r\n        i === 3 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\")) {\r\n          canMoveTo[i - 1][j + 1] = true;\r\n          importance += valueOfPiece(right.type);\r\n        }\r\n      }\r\n      */\r\n    }\r\n  }\r\n\r\n  if (turn === \"B\" && i !== 7) {\r\n    if (j !== 0) {\r\n      const upLeft = Board[i + 1][j - 1];\r\n      const left = Board[i][j - 1];\r\n      if (upLeft && upLeft.color === \"W\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upLeft.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n      else if (\r\n        // EN Passant\r\n        i === 4 &&\r\n        left &&\r\n        left.numOfMoves === 1 &&\r\n        left.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = newBoard[i][j];\r\n        newBoard[i][j - 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j - 1] = true;\r\n        importance += valueOfPiece(left.type);\r\n      }\r\n      */\r\n    }\r\n    if (j !== 7) {\r\n      const upRight = Board[i + 1][j + 1];\r\n      const right = Board[i][j + 1];\r\n      if (upRight && upRight.color === \"W\") {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(upRight.type);\r\n      }\r\n      /*\r\n      Removing En Passant for AI for now\r\n\r\n      else if (\r\n        // En Passant\r\n        i === 4 &&\r\n        right &&\r\n        right.numOfMoves === 1 &&\r\n        right.turnsSinceLastMove === 0\r\n      ) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = newBoard[i][j];\r\n        newBoard[i][j + 1] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          canMoveTo[i + 1][j + 1] = true;\r\n        importance += valueOfPiece(right.type);\r\n      }\r\n      */\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const RookScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance = 150;\r\n  const turn = Board[i][j].color;\r\n  const doesThisHorizontalMoveResultInCheck = (i: number, r: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[i][r] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n  const doesThisVerticalMoveResultInCheck = (r: number, j: number) => {\r\n    // If the new state of the board after the move happens results in the player being under check,\r\n    // then that move will not be possible.\r\n    let newBoard = Board.map((inner) => inner.slice());\r\n    newBoard[r][j] = newBoard[i][j];\r\n    newBoard[i][j] = null;\r\n    return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n  };\r\n\r\n  if (i !== 0) {\r\n    for (let r = i - 1; r >= 0; r--) {\r\n      //For boxes above the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisVerticalMoveResultInCheck(r, j))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (i !== 7) {\r\n    for (let r = i + 1; r <= 7; r++) {\r\n      //For boxes below the rook.\r\n      const piece = Board[r][j];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisVerticalMoveResultInCheck(r, j))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 0) {\r\n    for (let r = j - 1; r >= 0; r--) {\r\n      //For boxes left to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisHorizontalMoveResultInCheck(i, r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  if (j !== 7) {\r\n    for (let r = j + 1; r <= 7; r++) {\r\n      //For boxes right to the rook.\r\n      const piece = Board[i][r];\r\n\r\n      if (piece) {\r\n        if (piece.color === turn) break;\r\n        else if (!doesThisHorizontalMoveResultInCheck(i, r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const BishopScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance: number = 150;\r\n  const turn = Board[i][j].color;\r\n  //bishop can move in 4 directions.\r\n  for (let r = 1; r < 8; r++) {\r\n    // up-right.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i - r >= 0 && j + r <= 7) {\r\n      const piece = Board[i - r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // down-right.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j + r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j + r <= 7) {\r\n      let piece = Board[i + r][j + r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left bottom.\r\n    const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + r][j - r] = newBoard[i][j];\r\n      newBoard[i][j] = null;\r\n      return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n    };\r\n\r\n    if (i + r <= 7 && j - r >= 0) {\r\n      let piece = Board[i + r][j - r];\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 1; r < 8; r++) {\r\n    // left top.\r\n    if (i - r >= 0 && j - r >= 0) {\r\n      let piece = Board[i - r][j - r];\r\n\r\n      const isUnderCheckIfThisMoveHappens = (r: number) => {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - r][j - r] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        return isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n      };\r\n\r\n      if (piece) {\r\n        if (piece.color === Board[i][j].color) break;\r\n        else if (!isUnderCheckIfThisMoveHappens(r))\r\n          importance += valueOfPiece(piece.type);\r\n        break;\r\n      }\r\n    } else break;\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const KingScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance: number = 10000;\r\n  const turn = Board[i][j].color;\r\n\r\n  /*  Castling:\r\n  let king = Board[i][j];\r\n  let rook = Board[i][j + 3];\r\n  if (\r\n    Board[i][j + 3] &&\r\n    Board[i][j + 3].type === \"Rook\" &&\r\n    // The king and rook involved in castling must not have previously moved;\r\n    king.numOfMoves === 0 &&\r\n    rook.numOfMoves === 0 &&\r\n    // There must be no pieces between the king and the rook;\r\n    Board[i][j + 1] === null &&\r\n    Board[i][j + 2] === null\r\n  ) {\r\n    // The king may not currently be in check, nor may the king pass through or end up in a square that is under\r\n    // attack by an enemy piece;\r\n    // checking whether the king would be under check if castling did happen:\r\n    const board = Board.map((inner) => inner.slice());\r\n    board[i][j + 1] = Board[i][j + 3];\r\n    board[i][j + 2] = Board[i][j];\r\n    board[i][j] = null;\r\n    board[i][j + 3] = null;\r\n    if (!isUnderCheck(board, turn === \"W\" ? \"B\" : \"W\"))\r\n      canMoveTo[i][j + 2] = true;\r\n  }\r\n  */\r\n\r\n  if (i >= 1) {\r\n    const piece = Board[i - 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i - 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n    if (j >= 1) {\r\n      const piece = Board[i - 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      const piece = Board[i - 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (i <= 6) {\r\n    const piece = Board[i + 1][j];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i + 1][j] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n\r\n    if (j >= 1) {\r\n      const piece = Board[i + 1][j - 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n\r\n    if (j <= 6) {\r\n      const piece = Board[i + 1][j + 1];\r\n\r\n      if (!piece || piece.color !== turn) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 1] = Board[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          if (piece) importance += valueOfPiece(piece.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j >= 1) {\r\n    const piece = Board[i][j - 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j - 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n  }\r\n\r\n  if (j <= 6) {\r\n    const piece = Board[i][j + 1];\r\n\r\n    if (!piece || piece.color !== turn) {\r\n      let newBoard = Board.map((inner) => inner.slice());\r\n      newBoard[i][j + 1] = Board[i][j];\r\n      newBoard[i][j] = null;\r\n      if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n        if (piece) importance += valueOfPiece(piece.type);\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n\r\nexport const KnightScore = (i: number, j: number, Board: (Piece | any)[][]) => {\r\n  let importance = 200;\r\n  const turn = Board[i][j].color;\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight up and 1 left,\r\n  // Knight moving 2 straight up and 1 right,\r\n  if (i >= 2) {\r\n    // i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i - 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i - 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 straight down and 1 left,\r\n  // Knight moving 2 straight down and 1 right,\r\n  if (i <= 5) {\r\n    // i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (j >= 1) {\r\n      let left = Board[i + 2][j - 1];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j - 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (j <= 6) {\r\n      let right = Board[i + 2][j + 1];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 2][j + 1] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  // This covers the 2 cases:\r\n  // Knight moving 2 left and 1 up,\r\n  // Knight moving 2 left and 1 down,\r\n  if (j >= 2) {\r\n    //i has to be greater than 1 if the knight has to move ahead. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j - 2];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j - 2];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j - 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (j <= 5) {\r\n    //i has to be less than 6 if the knight has to move below. because it moves 2 straight\r\n    // and 1 in the other axis.\r\n    if (i >= 1) {\r\n      let left = Board[i - 1][j + 2];\r\n\r\n      if (left && left.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i - 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(left.type);\r\n      }\r\n    }\r\n    if (i <= 6) {\r\n      let right = Board[i + 1][j + 2];\r\n\r\n      if (right && right.color !== Board[i][j].color) {\r\n        let newBoard = Board.map((inner) => inner.slice());\r\n        newBoard[i + 1][j + 2] = newBoard[i][j];\r\n        newBoard[i][j] = null;\r\n        if (!isUnderCheck(newBoard, turn === \"W\" ? \"B\" : \"W\"))\r\n          importance += valueOfPiece(right.type);\r\n      }\r\n    }\r\n  }\r\n  importance *= turn === \"W\" ? 1 : -1;\r\n  Board[i][j].importance = importance;\r\n};\r\n","import { Piece } from \"./Piece\";\r\nimport { pieceStateUpdate } from \"./pieceLogic\";\r\nimport {\r\n  PawnScore,\r\n  RookScore,\r\n  BishopScore,\r\n  KingScore,\r\n  KnightScore,\r\n} from \"./AnalysePosition\";\r\n\r\n/*\r\nMin (B):      O\r\n            /   \\\r\nMax (W)    O     O * 10\r\n          / \\   / \\\r\nMin: (B) O   O O   O * 200\r\n*/\r\n\r\nexport class fromTo {\r\n  constructor(\r\n    i: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    j: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    x: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number,\r\n    y: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | number\r\n  ) {\r\n    this.i = i;\r\n    this.j = j;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n  // i, j represent move from.\r\n  i: number;\r\n  j: number;\r\n  // x, y represent moved to.\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst MinMax = (\r\n  board: (Piece | any)[][],\r\n  turn: \"W\" | \"B\",\r\n  iterationsLeft: number,\r\n  alpha: number,\r\n  beta: number\r\n): { score: number; moveToMake: fromTo } => {\r\n  // If this move is the bottom-most move in the MinMax search tree\r\n  if (iterationsLeft === 0)\r\n    return {\r\n      score: analyseBoard(board),\r\n      moveToMake: new fromTo(1, 1, 1, 1),\r\n    };\r\n  let scoresAndMoves: any = {};\r\n\r\n  const returnValue = () => {\r\n    console.log(\"RETURNING:\");\r\n    console.log(board);\r\n    let scoreToSend = 0;\r\n    if (turn === \"W\") {\r\n      scoreToSend = -100000;\r\n      for (let score in scoresAndMoves) {\r\n        let intScore = parseInt(score);\r\n        if (intScore > scoreToSend) scoreToSend = intScore;\r\n      }\r\n    } else {\r\n      scoreToSend = 100000;\r\n      for (let score in scoresAndMoves) {\r\n        let intScore = parseInt(score);\r\n        if (intScore < scoreToSend) scoreToSend = intScore;\r\n      }\r\n    }\r\n    console.log(scoresAndMoves);\r\n    console.log(\r\n      \"Best Move: \",\r\n      turn,\r\n      iterationsLeft,\r\n      scoreToSend,\r\n      scoresAndMoves[scoreToSend]\r\n    );\r\n    console.log(\"\\n\\n\\n\");\r\n    if (Object.keys(scoresAndMoves).length === 0)\r\n      return { score: -scoreToSend, moveToMake: new fromTo(-1, -1, -1, -1) };\r\n    return { score: scoreToSend, moveToMake: scoresAndMoves[scoreToSend] };\r\n  };\r\n\r\n  // Create a copy of the piece because piece.canMoveTo will change.\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n  pieceStateUpdate(newBoard, turn);\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      let count = 0;\r\n      // board[i][j] represents each piece.\r\n      if (!newBoard[i][j] || newBoard[i][j].color !== turn) continue;\r\n      for (let x = 0; x < 8; x++) {\r\n        for (let y = 0; y < 8; y++) {\r\n          let piece = newBoard[i][j];\r\n          // board[i][j].canMoveTo[x][y] represents each possible move by board[i][j].\r\n          // Check board[i][j].canMoveTo[x][y], play that move, analyse and save the new score\r\n          if (piece.canMoveTo[x][y]) {\r\n            count++;\r\n            // console.log(i, j, x, y, board[i][j].canMoveTo);\r\n            let newBoard = board.map((inner) => inner.slice());\r\n            newBoard[x][y] = newBoard[i][j];\r\n            newBoard[i][j] = null;\r\n\r\n            // Call MinMax again recursively on the new state of the Board.\r\n            // pieceStateUpdate(newBoard, turn === \"W\" ? \"B\" : \"W\");\r\n            let { score: scoreToSend, moveToMake } = MinMax(\r\n              newBoard,\r\n              turn === \"W\" ? \"B\" : \"W\",\r\n              iterationsLeft - 1,\r\n              alpha,\r\n              beta\r\n            );\r\n            let thisMove = new fromTo(i, j, x, y);\r\n\r\n            scoresAndMoves[scoreToSend] = thisMove;\r\n\r\n            // if (turn === \"W\" && scoreToSend !== 100000) {\r\n            //   alpha = Math.max(alpha, scoreToSend, -100000);\r\n            // } else if (scoreToSend !== -100000) {\r\n            //   beta = Math.min(beta, scoreToSend, 100000);\r\n            // }\r\n\r\n            // if (beta <= alpha) {\r\n            //   console.log(\"Broke out after \" + count + \" iterations\");\r\n            //   return returnValue();\r\n            // }\r\n\r\n            // Alpha-Beta Pruning\r\n            // Alpha is high, Beta is low\r\n            // Beta: The value returned is the maximum in the sub-tree\r\n            // Alpha represents the minimum best value. Beta represents the maximum best value\r\n\r\n            // if (\r\n            //   turn === \"W\"\r\n            //     ? scoreAfterThisMove > bestFutureMove.newScore\r\n            //     : scoreAfterThisMove < bestFutureMove.newScore\r\n            // )\r\n            //   bestFutureMove = {\r\n            //     newScore: scoreAfterThisMove,\r\n            //     newBestMove: thisMove,\r\n            //     newBoard,\r\n            //   };\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return returnValue();\r\n};\r\n\r\nexport default MinMax;\r\n\r\nconst analyseBoard = (board: (Piece | any)[][]) => {\r\n  let valueOfBoard: number = 0;\r\n  // board = JSON.parse(JSON.stringify(board));\r\n  for (let i = 0; i < 8; i++) {\r\n    for (let j = 0; j < 8; j++) {\r\n      if (board[i][j]) {\r\n        switch (board[i][j].type) {\r\n          case \"Pawn\":\r\n            PawnScore(i, j, board);\r\n            break;\r\n          case \"Bishop\":\r\n            BishopScore(i, j, board);\r\n            break;\r\n          case \"King\":\r\n            KingScore(i, j, board);\r\n            break;\r\n          case \"Queen\":\r\n            BishopScore(i, j, board);\r\n            RookScore(i, j, board);\r\n            break;\r\n          case \"Rook\":\r\n            RookScore(i, j, board);\r\n            break;\r\n          case \"Knight\":\r\n            KnightScore(i, j, board);\r\n            break;\r\n        }\r\n        valueOfBoard += board[i][j].importance;\r\n      }\r\n    }\r\n  }\r\n  return valueOfBoard;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Piece } from \"../game/Piece\";\r\nimport Square from \"../components/Square\";\r\nimport { initialBoard, initiallyCanMoveTo } from \"../game/InitialPosition\";\r\nimport { pieceStateUpdate } from \"../game/pieceLogic\";\r\nimport MinMax, { fromTo } from \"../game/MinMax\";\r\n\r\npieceStateUpdate(initialBoard, \"W\");\r\n\r\nconst Board: React.FC = () => {\r\n  const [board, setBoard] = useState(() => initialBoard);\r\n  const [previousClick, setPreviousClick] = useState([4, 4]);\r\n  const [turn, setTurn] = useState(\"W\");\r\n  const [canMoveToHighlighted, setCanMoveToHighlighted] = useState(() => [\r\n    ...initiallyCanMoveTo,\r\n  ]);\r\n  const clickNothing = () => {\r\n    setCanMoveToHighlighted(initiallyCanMoveTo.map((inner) => inner.slice()));\r\n    setPreviousClick([9, 9]);\r\n  };\r\n\r\n  const movePiece = (\r\n    previousBoard: (Piece | any)[][],\r\n    i: number,\r\n    k: number\r\n  ) => {\r\n    // Create a copy of the previous board\r\n    let newBoard = previousBoard.map((inner) => inner.slice());\r\n    if (newBoard[i][k] && newBoard[i][k].type === \"King\") {\r\n      // Game over here\r\n      alert(\"Game over\");\r\n    }\r\n\r\n    // Check for Castling:\r\n    if (\r\n      k === 6 &&\r\n      (i === 0 || i === 7) &&\r\n      previousClick[1] === 4 &&\r\n      (previousClick[0] === 0 || previousClick[0] === 7) &&\r\n      previousBoard[previousClick[0]][previousClick[1]].type === \"King\"\r\n    ) {\r\n      newBoard[i][k - 1] = previousBoard[previousClick[0]][7];\r\n      newBoard[i][7] = null;\r\n      newBoard[i][k - 1].numOfMoves++;\r\n    }\r\n\r\n    // Check for En Passant:\r\n    if (\r\n      (i === 2 &&\r\n        previousBoard[i + 1][k] &&\r\n        previousBoard[i + 1][k].type === \"Pawn\" &&\r\n        previousBoard[previousClick[0]][previousClick[1]].type === \"Pawn\") ||\r\n      (i === 5 &&\r\n        previousBoard[i - 1][k] &&\r\n        previousBoard[i - 1][k].type === \"Pawn\" &&\r\n        previousBoard[previousClick[0]][previousClick[1]].type === \"Pawn\")\r\n    )\r\n      newBoard[i === 2 ? 3 : 4][k] = null;\r\n\r\n    // Pawn Promotion\r\n    if (\r\n      (i === 0 &&\r\n        previousBoard[1][k] &&\r\n        previousBoard[1][k].color === \"W\" &&\r\n        previousBoard[1][k].type === \"Pawn\") ||\r\n      (i === 7 &&\r\n        previousBoard[6][k] &&\r\n        previousBoard[6][k].color === \"B\" &&\r\n        previousBoard[6][k].type === \"Pawn\")\r\n    )\r\n      previousBoard[i === 0 ? 1 : 6][k].type = \"Queen\";\r\n\r\n    newBoard[i][k] = previousBoard[previousClick[0]][previousClick[1]];\r\n    newBoard[previousClick[0]][previousClick[1]] = null;\r\n    newBoard[i][k].numOfMoves++;\r\n    newBoard[i][k].turnsSinceLastMove = 0;\r\n\r\n    // (piecesGivingCheck = [[i, k,], [i, k]]) piece locations that can directly kill the King in the next turn\r\n    // pieceStateUpdate(newBoard, turn);\r\n    return newBoard;\r\n  };\r\n\r\n  const handleClick = (i: number, k: number) => {\r\n    // If it's W's turn and they click B's Piece\r\n    if (\r\n      board[i][k] &&\r\n      turn !== board[i][k].color &&\r\n      !canMoveToHighlighted[i][k]\r\n    )\r\n      return;\r\n\r\n    // If clicking on the same box that the user previously clicked\r\n    if (i === previousClick[0] && k === previousClick[1]) return;\r\n\r\n    // If the Piece that the user previously clicked on can move to [i, k]\r\n    if (canMoveToHighlighted[i][k] == true) {\r\n      const newBoard = movePiece(board, i, k);\r\n      setBoard(newBoard);\r\n      setCanMoveToHighlighted(initiallyCanMoveTo.map((inner) => inner.slice()));\r\n\r\n      let { score: scoreToSend, moveToMake } = MinMax(\r\n        newBoard,\r\n        \"B\",\r\n        2,\r\n        -100000,\r\n        100000\r\n      );\r\n      console.log(\"FINAL\");\r\n      console.log(scoreToSend, moveToMake);\r\n      if (scoreToSend === -100000) {\r\n        alert(\"CheckMate! You defeated the AI :)\");\r\n        return;\r\n      }\r\n      setBoard((previousBoard) => {\r\n        let newBoard = previousBoard.map((inner) => inner.slice());\r\n        newBoard[moveToMake.x][moveToMake.y] =\r\n          newBoard[moveToMake.i][moveToMake.j];\r\n        newBoard[moveToMake.i][moveToMake.j] = null;\r\n        newBoard[moveToMake.x][moveToMake.y].numOfMoves++;\r\n        pieceStateUpdate(newBoard, \"W\");\r\n        setCanMoveToHighlighted((previousCanMoveTo) => {\r\n          let toReturn = initiallyCanMoveTo.map((inner) => inner.slice());\r\n          toReturn[moveToMake.x][moveToMake.y] = true;\r\n          toReturn[moveToMake.i][moveToMake.j] = true;\r\n          setPreviousClick([moveToMake.x, moveToMake.y]);\r\n          return toReturn;\r\n        });\r\n        return newBoard;\r\n      });\r\n      setTurn(\"W\");\r\n    } else {\r\n      setCanMoveToHighlighted((canMoveTo) => {\r\n        let newCanMoveTo = board[i][k].canMoveTo.map((inner: any): boolean[] =>\r\n          inner.slice()\r\n        );\r\n        newCanMoveTo[i][k] = true;\r\n        return newCanMoveTo;\r\n      });\r\n\r\n      setPreviousClick([i, k]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"app_board\" style={{ margin: \"auto\" }}>\r\n        {board.map((rows: Piece[][] | any, i: number) => {\r\n          return rows.map((col: Piece[], k: number) => {\r\n            return (\r\n              <Square\r\n                clickNothing={clickNothing}\r\n                k={k}\r\n                i={i}\r\n                key={`${i}_${k}`}\r\n                piece={board[i][k]}\r\n                handleClick={handleClick}\r\n                active={canMoveToHighlighted[i][k]}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\n// import { Piece } from \"./game/Piece\";\n\nconst App: React.FC = () => {\n  return (\n    <main className=\"app\">\n      <Board />\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}